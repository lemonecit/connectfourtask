{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","player1","player2","currentPlayer","board","gameOver","message","play","bind","r","row","c","push","this","setState","result","checkAll","togglePlayer","checkVertical","checkDiagonalRight","checkDiagonalLeft","checkHorizontal","checkDraw","initBoard","map","i","key","className","onClick","React","Component","Row","cell","value","columnIndex","Cell","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.cbc387e2.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      player1: 1,\n      player2: 2,\n      currentPlayer: null,\n      board: [],\n      gameOver: false,\n      message: ''\n    };\n\n    // Bind play function to App component\n    this.play = this.play.bind(this);\n  }\n\n  // Starts new game\n  initBoard() {\n    // Create a blank 6x7 matrix\n    let board = [];\n    for (let r = 0; r < 6; r++) {\n      let row = [];\n      for (let c = 0; c < 7; c++) { row.push(null) }\n      board.push(row);\n    }\n\n    this.setState({\n      board,\n      currentPlayer: this.state.player1,\n      gameOver: false,\n      message: ''\n    });\n  }\n\n  togglePlayer() {\n    return (this.state.currentPlayer === this.state.player1) ? this.state.player2 : this.state.player1;\n  }\n\n  play(c) {\n    if (!this.state.gameOver) {\n      // Place piece on board\n      let board = this.state.board;\n      for (let r = 5; r >= 0; r--) {\n        if (!board[r][c]) {\n          board[r][c] = this.state.currentPlayer;\n          break;\n        }\n      }\n\n      // Check status of board\n      let result = this.checkAll(board);\n      if (result === this.state.player1) {\n        this.setState({ board, gameOver: true, message: 'Player 1 wins!' });\n      } else if (result === this.state.player2) {\n        this.setState({ board, gameOver: true, message: 'Player 2 wins!' });\n      } else if (result === 'draw') {\n        this.setState({ board, gameOver: true, message: 'Draw game.' });\n      } else {\n        this.setState({ board, currentPlayer: this.togglePlayer() });\n      }\n    }\n\n    //  else {\n    //   this.setState({ message: 'Game over. Please start a new game.' });\n    // }\n  }\n\n  checkVertical(board) {\n    // Check only if row is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c] &&\n              board[r][c] === board[r - 2][c] &&\n              board[r][c] === board[r - 3][c]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkHorizontal(board) {\n    // Check only if column is 3 or less\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r][c + 1] &&\n              board[r][c] === board[r][c + 2] &&\n              board[r][c] === board[r][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDiagonalRight(board) {\n    // Check only if row is 3 or greater AND column is 3 or less\n    for (let r = 3; r < 6; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c + 1] &&\n              board[r][c] === board[r - 2][c + 2] &&\n              board[r][c] === board[r - 3][c + 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDiagonalLeft(board) {\n    // Check only if row is 3 or greater AND column is 3 or greater\n    for (let r = 3; r < 6; r++) {\n      for (let c = 3; c < 7; c++) {\n        if (board[r][c]) {\n          if (board[r][c] === board[r - 1][c - 1] &&\n              board[r][c] === board[r - 2][c - 2] &&\n              board[r][c] === board[r - 3][c - 3]) {\n            return board[r][c];\n          }\n        }\n      }\n    }\n  }\n\n  checkDraw(board) {\n    for (let r = 0; r < 6; r++) {\n      for (let c = 0; c < 7; c++) {\n        if (board[r][c] === null) {\n          return null;\n        }\n      }\n    }\n    return 'draw';\n  }\n\n  checkAll(board) {\n    return this.checkVertical(board) || this.checkDiagonalRight(board) || this.checkDiagonalLeft(board) || this.checkHorizontal(board) || this.checkDraw(board);\n  }\n\n  componentWillMount() {\n    this.initBoard();\n  }\n\n  render() {\n    return (\n      <div>\n\n\n        <table>\n          <thead>\n          </thead>\n          <tbody>\n            {this.state.board.map((row, i) => (<Row key={i} row={row} play={this.play} />))}\n          </tbody>\n        </table>\n\n        <div className=\"winnerMessage\"><p className=\"message\">{this.state.message}</p></div>\n\n\n\n            <div className=\"button\" onClick={() => {this.initBoard()}}>New Game</div>\n\n      </div>\n    );\n  }\n}\n\n// Row component\nconst Row = ({ row, play }) => {\n  return (\n    <tr>\n      {row.map((cell, i) => <Cell key={i} value={cell} columnIndex={i} play={play} />)}\n    </tr>\n  );\n};\n\nconst Cell = ({ value, columnIndex, play }) => {\n  let color = 'white';\n  if (value === 1) {\n    color = 'red';\n  } else if (value === 2) {\n    color = 'yellow';\n  }\n\n  return (\n    <td>\n      <div className=\"cell\" onClick={() => {play(columnIndex)}}>\n        <div className={color}></div>\n      </div>\n    </td>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}